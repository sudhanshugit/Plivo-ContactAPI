package com.plivo.contacts_API;



import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
 

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

import com.sun.jersey.core.util.Base64;

public class UserAuthenticationFilter implements javax.ws.rs.container.ContainerRequestFilter
{
		@Context
	    private ResourceInfo resourceInfo;
		
		private static final String AUTHORIZATION_PROPERTY = "Authorization";
		private static final String AUTHENTICATION_SCHEME = "Basic";
		private static final Response ACCESS_DENIED = Response.status(Response.Status.UNAUTHORIZED)
                .entity("You cannot access this resource").build();
		private static final Response ACCESS_FORBIDDEN = Response.status(Response.Status.FORBIDDEN)
                .entity("Access blocked for all users !!").build();
		
		
		@Override
	    public void filter(ContainerRequestContext requestContext)
	    {
	        	              
	            //Get request headers
	            final MultivaluedMap<String, String> headers = requestContext.getHeaders();
	              
	            //Fetch authorization header
	            final List<String> authorization = headers.get(AUTHORIZATION_PROPERTY);
	              
	            //If no authorization information present; block access
	            if(authorization == null || authorization.isEmpty())
	            {
	                requestContext.abortWith(ACCESS_DENIED);
	                return;
	            }
	              
	            
	            final String usernameAndPassword = authorization.get(0).replaceFirst(AUTHENTICATION_SCHEME + " ", "");
	            final StringTokenizer tokenizer = new StringTokenizer(usernameAndPassword, ":");
	            final String username = tokenizer.nextToken();
	            final String password = tokenizer.nextToken();
	              
	            //Verifying Username and password
	            System.out.println(username);
	            System.out.println(password);
	              
	            if( ! isUserAllowed(username, password))
                {
                    requestContext.abortWith(ACCESS_DENIED);
                    return;
                }
	    }
	    private boolean isUserAllowed(final String username, final String password)
	    {
	        boolean isAllowed = false;
	          
	        //Step 1. Fetch password from database and match with password in argument
	        //If both match then get the defined role for user from database and continue; else return isAllowed [false]
	        //Access the database and do this part yourself
	        //String userRole = userMgr.getUserRole(username);
	         
	        if(username.equals("howtodoinjava") && password.equals("password"))
	        {
	            String userRole = "ADMIN";
	             
	            
	            
	            
	            
	        }
	        return isAllowed;
	    }
	
}
